{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter } from \"next/router\";\nimport { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { useCookies } from 'react-cookie';\nimport ColSell from './col.sells.pending.component';\n\nvar SellsPending = function SellsPending(e) {\n  var _useState = useState([]),\n      transactionFind = _useState[0],\n      setTransactionFind = _useState[1];\n\n  var _useCookies = useCookies(['user']),\n      _useCookies2 = _slicedToArray(_useCookies, 2),\n      cookies = _useCookies2[0],\n      setCookies = _useCookies2[1];\n\n  var Router = useRouter();\n  useEffect(function () {\n    if (cookies.user && cookies.user.rol !== 'seller') {\n      Router.push('/');\n    } else if (!cookies.user) {\n      Router.push('/');\n    }\n\n    var handlerFetch = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var getFetch, resFetch;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch(\"\".concat(process.env.API_PATH, \"/v1/product/transaction/sells\"), {\n                  headers: {\n                    'Content-Type': 'application/json',\n                    'Access-Control-Allow-Origin': '*'\n                  }\n                });\n\n              case 2:\n                getFetch = _context.sent;\n                _context.next = 5;\n                return getFetch.json();\n\n              case 5:\n                resFetch = _context.sent;\n                setTransactionFind(resFetch);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function handlerFetch() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    handlerFetch();\n  }, [e]);\n  return __jsx(React.Fragment, null, transactionFind.status == 200 ? transactionFind.transaction.map(function (data, i) {\n    return __jsx(ColSell, {\n      key: i,\n      idProduct: data.id_product,\n      dataOrder: data\n    });\n  }) : __jsx(\"p\", null, \"No hay transacciones disponibles\"));\n};\n\nexport default SellsPending;","map":null,"metadata":{},"sourceType":"module"}