{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter } from \"next/router\";\nimport { useState, useEffect } from \"react\";\nimport ColSell from './col.sells.pending.component';\nimport OnLoadComponent from '../../onload.component';\nimport axios from 'axios';\nimport GetItem from '../../localStorage/getItem';\n\nconst SellsPending = ({\n  dateFilter\n}) => {\n  const {\n    0: transactionFind,\n    1: setTransactionFind\n  } = useState([]);\n  const {\n    0: cookies,\n    1: setCookies\n  } = useState(GetItem('user'));\n  const {\n    0: onLoadAdd,\n    1: setOnLoadAdd\n  } = useState(false);\n  const Router = useRouter();\n\n  const handlerFetch = async () => {\n    var _cookies$user;\n\n    setOnLoadAdd(true);\n    const getFetch = await axios.get(`${process.env.API_PATH}/v1/product/transaction/sells`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'date_filter': dateFilter,\n        'business': cookies === null || cookies === void 0 ? void 0 : (_cookies$user = cookies.user) === null || _cookies$user === void 0 ? void 0 : _cookies$user.business\n      }\n    });\n    const resFetch = await (getFetch === null || getFetch === void 0 ? void 0 : getFetch.data);\n    (await resFetch) && resFetch.status && dateFilter && setOnLoadAdd(false);\n    setTransactionFind(resFetch);\n  };\n\n  const cred = ['seller', 'master'];\n  let accessDenied = false;\n  useEffect(() => {\n    handlerFetch();\n  }, [dateFilter]);\n  useEffect(() => {\n    (cred === null || cred === void 0 ? void 0 : cred.length) > 0 && cred.forEach(credential => {\n      var _cookies$user2;\n\n      if ((cookies === null || cookies === void 0 ? void 0 : (_cookies$user2 = cookies.user) === null || _cookies$user2 === void 0 ? void 0 : _cookies$user2.rol) === credential) {\n        accessDenied = true;\n      }\n    });\n    !accessDenied && Router.push('/');\n  }, [cookies === null || cookies === void 0 ? void 0 : cookies.user]);\n  return __jsx(React.Fragment, null, transactionFind.status == 200 && transactionFind.transaction.length > 0 ? transactionFind.transaction.map((data, i) => __jsx(ColSell, {\n    transaction: data,\n    key: i\n  })) : __jsx(\"p\", null, \"No hay transacciones disponibles\"), __jsx(OnLoadComponent.OnloadArticlesComponent, {\n    status: onLoadAdd\n  }));\n};\n\nexport default SellsPending;","map":null,"metadata":{},"sourceType":"module"}